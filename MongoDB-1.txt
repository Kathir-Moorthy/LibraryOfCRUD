### MongoDB Exercise Guide

---

## 1. Create Operation

**Step 1.1: Create a Database**
- To create and switch to a new database named "library":
```shell
use library
```
*Example:* Imagine we are building a database to store books in a library.

**Step 1.2: Create a Collection**
- Create a collection named "books":
```shell
db.createCollection("books")
```
*Note:* This step is optional since MongoDB creates the collection automatically when you insert a document.

**Step 1.3: Insert a Document**
- Insert details of a famous book like "The Great Gatsby":
```shell
db.books.insert({
  title: "The Great Gatsby",
  author: "F. Scott Fitzgerald",
  published_year: 1925
})
```

---

## 2. Read Operation

**Step 2.1: Retrieve All Documents**
- Retrieve all the books stored in the "books" collection:
```shell
db.books.find()
```

**Step 2.2: Find Books by Author**
- Find all books written by "J.K. Rowling":
```shell
db.books.find({ author: "J.K. Rowling" })
```
*Example Result:* Books like "Harry Potter and the Philosopher's Stone" will match this query.

**Step 2.3: Find the Earliest Published Book**
- Retrieve the book with the oldest publication year:
```shell
db.books.find().sort({ published_year: 1 }).limit(1)
```
*Example Result:* "Don Quixote" (published in 1605) might be retrieved.

---

## 3. Update Operation

**Step 3.1: Update a Book's Published Year**
- Update the published year of "The Catcher in the Rye" to the current year (e.g., 2024):
```shell
db.books.update(
  { title: "The Catcher in the Rye" },
  { $set: { published_year: 2024 } }
)
```

**Step 3.2: Add a New Field**
- Add a field `genre` with the value "Mystery" to all books:
```shell
db.books.update(
  {},
  { $set: { genre: "Mystery" } },
  { multi: true }
)
```
*Example:* All books will now have a genre, including books like "The Da Vinci Code".

---

## 4. Delete Operation

**Step 4.1: Remove a Specific Book**
- Remove the book "1984" by George Orwell:
```shell
db.books.remove({ title: "1984" })
```

**Step 4.2: Delete Old Books**
- Delete books published before the year 2000:
```shell
db.books.remove({ published_year: { $lt: 2000 } })
```
*Example:* Books like "Pride and Prejudice" (1813) will be removed.

---

## 5. Advanced Query

**Step 5.1: Find Top 3 Recently Published Books**
- Retrieve the three most recently published books:
```shell
db.books.find().sort({ published_year: -1 }).limit(3)
```
*Example Result:* Books like "The Midnight Library" (2020), "Project Hail Mary" (2021), and "The Last House on Needless Street" (2021).

**Step 5.2: Find Books Containing Specific Words**
- Retrieve books with titles containing "MongoDB" or "NoSQL":
```shell
db.books.find({ title: { $regex: /(MongoDB|NoSQL)/i } })
```
*Example Result:* "MongoDB: The Definitive Guide" or "NoSQL Distilled".

---

### Summary of MongoDB Commands
- **Switch/Create Database**: `use <database_name>`
- **Insert Document**: `db.collection.insert(document)`
- **Find Documents**: `db.collection.find(query)`
- **Update Documents**:
  - `$set`: Modify fields.
  - `multi: true`: Apply updates to multiple documents.
- **Delete Documents**: `db.collection.remove(query)`
- **Sort Results**: `sort({ field: 1 })` for ascending or `sort({ field: -1 })` for descending.
- **Limit Results**: `limit(number)` to restrict the number of results.
- **Regex Queries**: `$regex` for pattern matching in string fields.

---

### Examples Summary
- Inserted famous books like "The Great Gatsby" and "Harry Potter".
- Queried classics like "Don Quixote" and modern hits like "The Midnight Library".
- Updated genres for books such as "The Da Vinci Code".
- Deleted older books like "Pride and Prejudice".

This exercise demonstrates MongoDBâ€™s CRUD operations and helps build real-world database handling skills.